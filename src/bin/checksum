#!/bin/bash -eu
set -o pipefail

source "$(dirname "${BASH_SOURCE[0]}")/../load"

function _print_usage() {
    echo "Usage: $(basename "$0") [ACTION] [DIRECTORY]"
    echo
    echo "Calculates or verifies SHA512 checksums for files in a directory and its subdirectories."
    echo
    echo "Actions:"
    echo "  -c, --calculate   Calculate and store checksums."
    echo "  -v, --verify      Verify existing checksums."
    echo
    echo "Arguments:"
    echo "  DIRECTORY         The target directory."
    echo
}

function _calculate() {
    local directory="${1:-}"
    local exit_code=0

    if [[ -z "${directory}" ]]; then
        _print_usage
        return 1
    fi

    if [[ ! -d "${directory}" ]]; then
        print_error "Directory ${directory} does not exist"
        return 1
    fi

    total=$(find "${directory}" -type d | wc -l)
    counter=1
    while IFS= read -r dir; do
        print_info "(${counter}/${total}) Calculating checksums for files in ${dir}"
        if ! (cd "${dir}" && {
            find . -maxdepth 1 -type f ! -name "checksums.sha512*" ! -name "*.par2" ! -name "metadata.json" -exec sha512sum "{}" + > "./checksums.sha512"
            sha512sum "./checksums.sha512" > "./checksums.sha512.sig"
        }); then
            print_error "Failed to calculate checksums for ${dir}"
            exit_code=1
        fi
        counter=$((counter + 1))
    done < <(find "${directory}" -type d)

    if [[ ${exit_code} -eq 0 ]]; then
        echo
        print_success "Checksums calculated successfully for all directories"
    else
        echo
        print_error "Failed to calculate checksums for some directories"
    fi
    return "${exit_code}"
}

function _verify() {
    local directory="${1:-}"
    local exit_code=0

    if [[ -z "${directory}" ]]; then
        _print_usage
        return 1
    fi

    if [[ ! -d "${directory}" ]]; then
        print_error "Directory ${directory} does not exist"
        return 1
    fi

    total=$(find "${directory}" -type d | wc -l)
    counter=1
    while IFS= read -r dir; do
        print_info "(${counter}/${total}) Verifying checksums for files in ${dir}"

        if [[ ! -f "${dir}/checksums.sha512" || ! -f "${dir}/checksums.sha512.sig" ]]; then
            print_error "Missing checksums or signature file for ${dir}"
            exit_code=1
            continue
        fi

        if ! (cd "${dir}" && sha512sum --quiet -c "checksums.sha512.sig" &> /dev/null); then
            print_error "Signature verification failed for ${dir}"
            exit_code=1
            continue
        fi

        if ! output=$( (cd "${dir}" && sha512sum -c "checksums.sha512") 2>&1); then
            print_warning "Checksum verification failed for ${dir}"
            echo "${output}" | grep 'FAILED$'
            exit_code=1
        else
            print_success "Checksums verified successfully for ${dir}"
        fi

        counter=$((counter + 1))
    done < <(find "${directory}" -type d)

    if [[ ${exit_code} -eq 0 ]]; then
        echo
        print_success "Checksums verified successfully for all directories"
    else
        echo
        print_error "Checksum verification failed for some directories"
    fi
    return "${exit_code}"
}

function main() {
    if [[ $# -eq 0 ]]; then
        _print_usage
        return 1
    fi

    local action=""
    local directory=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
        -c | --calculate)
            action="calculate"
            shift
            ;;
        -v | --verify)
            action="verify"
            shift
            ;;
        *)
            if [[ -z "${directory}" ]]; then
                directory="$1"
                shift
            else
                print_error "Unknown argument: $1"
                _print_usage
                return 1
            fi
            ;;
        esac
    done

    if [[ -z "${action}" ]]; then
        print_error "No action specified."
        _print_usage
        return 1
    fi

    if [[ -z "${directory}" ]]; then
        print_error "No directory specified."
        _print_usage
        return 1
    fi

    case "${action}" in
    calculate)
        _calculate "${directory}"
        ;;
    verify)
        _verify "${directory}"
        ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
